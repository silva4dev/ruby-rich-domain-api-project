# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hanami-router` gem.
# Please instead update this file by running `bin/tapioca gem hanami-router`.


# @see Hanami::Router
#
# source://hanami-router//lib/hanami/router.rb#7
module Hanami; end

# Hanami Rack middleware
#
# @since 1.3.0
#
# source://hanami-router//lib/hanami/middleware/node.rb#6
module Hanami::Middleware; end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/middleware/app.rb#12
class Hanami::Middleware::App
  # @api private
  # @param router [Hanami::Router]
  # @param mapping [Hash]
  # @return [App] a new instance of App
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/app.rb#18
  def initialize(router, mapping); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/app.rb#39
  def call(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/app.rb#45
  def to_inspect; end
end

# Trie node to register scopes with custom Rack middleware
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/middleware/node.rb#11
class Hanami::Middleware::Node
  # @api private
  # @return [Node] a new instance of Node
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#18
  def initialize; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#14
  def app; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#64
  def app!(app); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#70
  def app?; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#26
  def freeze; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#46
  def get(segment); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#76
  def leaf?; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#34
  def put(segment); end

  # @api private
  # @since 2.0.3
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#88
  def segment_for(segment); end

  # @api private
  # @return [Boolean]
  # @since 2.0.3
  #
  # source://hanami-router//lib/hanami/middleware/node.rb#82
  def variable?(segment); end
end

# Trie to register scopes with custom Rack middleware
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/middleware/trie.rb#11
class Hanami::Middleware::Trie
  # @api private
  # @return [Trie] a new instance of Trie
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#14
  def initialize(app); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#28
  def add(path, app); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#55
  def empty?; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#39
  def find(path); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#21
  def freeze; end

  private

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/middleware/trie.rb#63
  def for_each_segment(path, &blk); end
end

# Rack compatible, lightweight and fast HTTP Router.
#
# @since 0.1.0
#
# source://hanami-router//lib/hanami/router.rb#11
class Hanami::Router
  # Initialize the router
  #
  # @example Base usage
  #   require "hanami/router"
  #
  #   Hanami::Router.new do
  #   get "/", to: ->(*) { [200, {}, ["OK"]] }
  #   end
  # @param base_url [String] the base URL where the HTTP application is
  #   deployed
  # @param prefix [String] the relative URL prefix where the HTTP application
  #   is deployed
  # @param resolver [#call(path, to)] a resolver for route endpoints
  # @param block_context [Hanami::Router::Block::Context]
  # @param not_found [#call(env)] default handler when route is not matched
  # @param blk [Proc] the route definitions
  # @return [Hanami::Router]
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#77
  def initialize(base_url: T.unsafe(nil), prefix: T.unsafe(nil), resolver: T.unsafe(nil), not_allowed: T.unsafe(nil), not_found: T.unsafe(nil), block_context: T.unsafe(nil), inspector: T.unsafe(nil), &blk); end

  # Resolve the given Rack env to a registered endpoint and invokes it.
  #
  # @param env [Hash] a Rack env
  # @return [Array] a finalized Rack env response
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#102
  def call(env); end

  # Defines a route that accepts DELETE requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#276
  def delete(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#613
  def fixed(env); end

  # Defines a route that accepts GET requests for the given path.
  # It also defines a route to accept HEAD requests.
  #
  # @example Proc endpoint
  #   require "hanami/router"
  #
  #   Hanami::Router.new do
  #   get "/", to: ->(*) { [200, {}, ["OK"]] }
  #   end
  # @example Block endpoint
  #   require "hanami/router"
  #
  #   Hanami::Router.new do
  #   get "/" do
  #   "OK"
  #   end
  #   end
  # @example Named route
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/", to: ->(*) { [200, {}, ["OK"]] }, as: :welcome
  #   end
  #
  #   router.path(:welcome) # => "/"
  #   router.url(:welcome)  # => #<URI::HTTP http://localhost/>
  # @example Constraints
  #   require "hanami/router"
  #
  #   Hanami::Router.new do
  #   get "/users/:id", to: ->(*) { [200, {}, ["OK"]] }, id: /\d+/
  #   end
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#203
  def get(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # @api private
  # @since 2.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#625
  def globbed_or_mounted(env); end

  # Routes inspector
  #
  # @return [Hanami::Router::Inspector]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#37
  def inspector; end

  # Defines a route that accepts LINK requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#330
  def link(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Mount a Rack application at the specified path.
  # All the requests starting with the specified path, will be forwarded to
  # the given application.
  #
  # All the other methods (eg `#get`) support callable objects, but they
  # restrict the range of the acceptable HTTP verb. Mounting an application
  # with #mount doesn't apply this kind of restriction at the router level,
  # but let the application to decide.
  #
  # @example
  #   require "hanami/router"
  #
  #   Hanami::Router.new do
  #   mount MyRackApp.new, at: "/foo"
  #   end
  # @param app [#call] a class or an object that responds to #call
  # @param at [String] the relative path where to mount the app
  # @param constraints [Hash] a set of constraints for path variables
  # @since 0.1.1
  #
  # source://hanami-router//lib/hanami/router.rb#424
  def mount(app, at:, **constraints); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#636
  def not_allowed(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#645
  def not_found(env); end

  # Defines a route that accepts OPTIONS requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#312
  def options(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Defines a route that accepts PATCH requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#240
  def patch(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Generate an relative URL for a specified named route.
  # The additional arguments will be used to compose the relative URL - in
  #   case it has tokens to match - and for compose the query string.
  #
  # @example
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new(base_url: "https://hanamirb.org") do
  #   get "/login", to: ->(*) { ... }, as: :login
  #   get "/:name", to: ->(*) { ... }, as: :framework
  #   end
  #
  #   router.path(:login)                          # => "/login"
  #   router.path(:login, return_to: "/dashboard") # => "/login?return_to=%2Fdashboard"
  #   router.path(:framework, name: "router")      # => "/router"
  # @param name [Symbol] the route name
  # @raise [Hanami::Router::MissingRouteError] when the router fails to
  #   recognize a route, because of the given arguments.
  # @return [String]
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#460
  def path(name, variables = T.unsafe(nil)); end

  # Defines a route that accepts POST requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#222
  def post(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Defines a route that accepts PUT requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#258
  def put(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Recognize the given env, path, or name and return a route for testing
  # inspection.
  #
  # If the route cannot be recognized, it still returns an object for testing
  # inspection.
  #
  # @example Successful Path Recognition
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize("/books/23")
  #   route.verb      # => "GET" (default)
  #   route.routable? # => true
  #   route.params    # => {:id=>"23"}
  # @example Successful Rack Env Recognition
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize(Rack::MockRequest.env_for("/books/23"))
  #   route.verb      # => "GET" (default)
  #   route.routable? # => true
  #   route.params    # => {:id=>"23"}
  # @example Successful Named Route Recognition
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize(:book, id: 23)
  #   route.verb      # => "GET" (default)
  #   route.routable? # => true
  #   route.params    # => {:id=>"23"}
  # @example Failing Recognition For Unknown Path
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize("/books")
  #   route.verb      # => "GET" (default)
  #   route.routable? # => false
  # @example Failing Recognition For Path With Wrong HTTP Verb
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize("/books/23", method: :post)
  #   route.verb      # => "POST"
  #   route.routable? # => false
  # @example Failing Recognition For Rack Env With Wrong HTTP Verb
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize(Rack::MockRequest.env_for("/books/23", method: :post))
  #   route.verb      # => "POST"
  #   route.routable? # => false
  # @example Failing Recognition Named Route With Wrong Params
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize(:book)
  #   route.verb      # => "GET" (default)
  #   route.routable? # => false
  # @example Failing Recognition Named Route With Wrong HTTP Verb
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   get "/books/:id", to: ->(*) { ... }, as: :book
  #   end
  #
  #   route = router.recognize(:book, {method: :post}, {id: 1})
  #   route.verb      # => "POST"
  #   route.routable? # => false
  #   route.params    # => {:id=>"1"}
  # @param env [Hash, String, Symbol] Rack env, path or route name
  # @param options [Hash] a set of options for Rack env or route params
  # @param params [Hash] a set of params
  # @return [Hanami::Routing::RecognizedRoute] the recognized route
  # @see Hanami::Router#env_for
  # @see Hanami::Routing::RecognizedRoute
  # @since 0.5.0
  #
  # source://hanami-router//lib/hanami/router.rb#602
  def recognize(env, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Defines a route that redirects the incoming request to another path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param code [Integer] a HTTP status code to use for the redirect
  # @raise [Hanami::Router::UnknownHTTPStatusCodeError] when an unknown redirect code is given
  # @see #get
  # @see #initialize
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#365
  def redirect(path, to: T.unsafe(nil), as: T.unsafe(nil), code: T.unsafe(nil)); end

  # Defines a named root route (a GET route for "/")
  #
  # @example Proc endpoint
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   root to: ->(env) { [200, {}, ["Hello from Hanami!"]] }
  #   end
  # @example Block endpoint
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   root do
  #   "Hello from Hanami!"
  #   end
  #   end
  # @example URL helpers
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new(base_url: "https://hanamirb.org") do
  #   root do
  #   "Hello from Hanami!"
  #   end
  #   end
  #
  #   router.path(:root) # => "/"
  #   router.url(:root)  # => #<URI::HTTPS https://hanamirb.org>
  # @param to [#call] the Rack endpoint
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #path
  # @see #url
  # @since 0.7.0
  #
  # source://hanami-router//lib/hanami/router.rb#152
  def root(to: T.unsafe(nil), &blk); end

  # Defines a routing scope. Routes defined in the context of a scope,
  # inherit the given path as path prefix and as a named routes prefix.
  #
  # @example
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new do
  #   scope "v1" do
  #   get "/users", to: ->(*) { ... }, as: :users
  #   end
  #   end
  #
  #   router.path(:v1_users) # => "/v1/users"
  # @param path [String] the scope path to be used as a path prefix
  # @param blk [Proc] the routes definitions withing the scope
  # @see #path
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#389
  def scope(path, &blk); end

  # Defines a route that accepts TRACE requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#294
  def trace(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Defines a route that accepts UNLINK requests for the given path.
  #
  # @param path [String] the relative URL to be matched
  # @param to [#call] the Rack endpoint
  # @param as [Symbol] a unique name for the route
  # @param constraints [Hash] a set of constraints for path variables
  # @param blk [Proc] the anonymous proc to be used as endpoint for the route
  # @see #get
  # @see #initialize
  # @see #path
  # @see #url
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#348
  def unlink(path, to: T.unsafe(nil), as: T.unsafe(nil), **constraints, &blk); end

  # Generate an absolute URL for a specified named route.
  # The additional arguments will be used to compose the relative URL - in
  #   case it has tokens to match - and for compose the query string.
  #
  # @example
  #   require "hanami/router"
  #
  #   router = Hanami::Router.new(base_url: "https://hanamirb.org") do
  #   get "/login", to: ->(*) { ... }, as: :login
  #   get "/:name", to: ->(*) { ... }, as: :framework
  #   end
  #
  #   router.url(:login)                          # => #<URI::HTTPS https://hanamirb.org/login>
  #   router.url(:login, return_to: "/dashboard") # => #<URI::HTTPS https://hanamirb.org/login?return_to=%2Fdashboard>
  #   router.url(:framework, name: "router")      # => #<URI::HTTPS https://hanamirb.org/router>
  # @param name [Symbol] the route name
  # @raise [Hanami::Router::MissingRouteError] when the router fails to
  #   recognize a route, because of the given arguments.
  # @return [URI::HTTP, URI::HTTPS]
  # @see #path
  # @since 0.1.0
  #
  # source://hanami-router//lib/hanami/router.rb#490
  def url(name, variables = T.unsafe(nil)); end

  # URL helpers for other Hanami integrations
  #
  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#30
  def url_helpers; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#619
  def variable(env); end

  protected

  # Fabricate Rack env for the given Rack env, path or named route
  #
  # @api private
  # @param env [Hash, String, Symbol] Rack env, path or route name
  # @param options [Hash] a set of options for Rack env or route params
  # @param params [Hash] a set of params
  # @return [Hash] Rack env
  # @see Hanami::Router#recognize
  # @see http://www.rubydoc.info/github/rack/rack/Rack%2FMockRequest.env_for
  # @since 0.5.0
  #
  # source://hanami-router//lib/hanami/router.rb#664
  def env_for(env, params = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#933
  def _not_allowed_fixed(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#949
  def _not_allowed_variable(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#916
  def _params(env, params); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#905
  def _redirect(to, code); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#840
  def add_fixed_route(http_method, path, to); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#827
  def add_globbed_route(http_method, path, to, constraints); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#847
  def add_named_route(path, as, constraints); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#790
  def add_route(http_method, path, to, as, constraints, &blk); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#833
  def add_variable_route(http_method, path, to, constraints); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#859
  def globbed?(path); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#865
  def inspect?; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#781
  def lookup(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#877
  def prefixed_name(name); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#871
  def prefixed_path(path); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#818
  def resolve_endpoint(path, to, blk); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#853
  def variable?(path); end

  # Returns a new instance of Hanami::Router with the modified options.
  #
  # @api private
  # @return [Hanami::Route] a new instance of Hanami::Router
  # @see Hanami::Router#initialize
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router.rb#889
  def with(**new_options, &blk); end

  class << self
    # Returns the given block as it is.
    #
    # @example
    #   # apps/web/config/routes.rb
    #   Hanami::Router.define do
    #   get "/", to: ->(*) { ... }
    #   end
    # @param blk [Proc] a set of route definitions
    # @return [Proc] the given block
    # @since 0.5.0
    #
    # source://hanami-router//lib/hanami/router.rb#52
    def define(&blk); end
  end
end

# Block endpoint
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/block.rb#9
class Hanami::Router::Block
  # @api private
  # @return [Block] a new instance of Block
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#75
  def initialize(context_class, blk); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#83
  def call(env); end
end

# Context to handle a single incoming HTTP request for a block endpoint
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/block.rb#13
class Hanami::Router::Block::Context
  # @api private
  # @return [Context] a new instance of Context
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#16
  def initialize(blk, env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#67
  def call; end

  # Rack env
  #
  # @api private
  # @return [Hash] the Rack env
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#26
  def env; end

  # @api private
  # @overload headers
  # @overload headers
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#48
  def headers(value = T.unsafe(nil)); end

  # HTTP Params from URL variables and HTTP body parsing
  #
  # @api private
  # @return [Hash] the HTTP params
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#61
  def params; end

  # @api private
  # @overload status
  # @overload status
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/block.rb#34
  def status(value = T.unsafe(nil)); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#686
Hanami::Router::DEFAULT_BASE_URL = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#690
Hanami::Router::DEFAULT_PREFIX = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#710
Hanami::Router::DEFAULT_REDIRECT_CODE = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#706
Hanami::Router::DEFAULT_RESOLVER = T.let(T.unsafe(nil), Proc)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#702
Hanami::Router::EMPTY_STRING = T.let(T.unsafe(nil), String)

# Base class for all Hanami::Router errors.
#
# @api public
# @since 0.5.0
#
# source://hanami-router//lib/hanami/router/errors.rb#9
class Hanami::Router::Error < ::StandardError; end

# Renders a human friendly representation of the routes
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#9
module Hanami::Router::Formatter; end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#10
class Hanami::Router::Formatter::HumanFriendly
  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#38
  def call(routes); end

  private

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#44
  def format_route_unless_head(route); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#33
Hanami::Router::Formatter::HumanFriendly::EXTRA_LARGE_STRING_JUSTIFY_AMOUNT = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#28
Hanami::Router::Formatter::HumanFriendly::LARGE_STRING_JUSTIFY_AMOUNT = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#23
Hanami::Router::Formatter::HumanFriendly::MEDIUM_STRING_JUSTIFY_AMOUNT = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#13
Hanami::Router::Formatter::HumanFriendly::NEW_LINE = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/formatter/human_friendly.rb#18
Hanami::Router::Formatter::HumanFriendly::SMALL_STRING_JUSTIFY_AMOUNT = T.let(T.unsafe(nil), Integer)

# source://hanami-router//lib/hanami/router/globbed_path.rb#5
class Hanami::Router::GlobbedPath
  # @return [GlobbedPath] a new instance of GlobbedPath
  #
  # source://hanami-router//lib/hanami/router/globbed_path.rb#6
  def initialize(http_method, path, to); end

  # source://hanami-router//lib/hanami/router/globbed_path.rb#12
  def endpoint_and_params(env); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#734
Hanami::Router::HTTP_BODY_NOT_ALLOWED = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#738
Hanami::Router::HTTP_BODY_NOT_ALLOWED_LENGTH = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#722
Hanami::Router::HTTP_BODY_NOT_FOUND = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#726
Hanami::Router::HTTP_BODY_NOT_FOUND_LENGTH = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#742
Hanami::Router::HTTP_HEADER_LOCATION = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#730
Hanami::Router::HTTP_STATUS_NOT_ALLOWED = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#718
Hanami::Router::HTTP_STATUS_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#714
Hanami::Router::HTTP_STATUS_OK = T.let(T.unsafe(nil), Integer)

# Builds a representation of an array of routes according to a given formatter.
#
# @api private
# @see Router.new
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/inspector.rb#13
class Hanami::Router::Inspector
  # @api public
  # @param routes [Array<Hanami::Route>]
  # @param formatter [#call] routes formatter, taking routes as an argument and returning its
  #   own representation (typically a string). Defaults to {Formatter::HumanFriendly}.
  # @return [Inspector] a new instance of Inspector
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/inspector.rb#20
  def initialize(routes: T.unsafe(nil), formatter: T.unsafe(nil)); end

  # Adds a route to be inspected.
  #
  # @api public
  # @param route [Route]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/inspector.rb#31
  def add_route(route); end

  # Calls the formatter for all added routes.
  #
  # @api public
  # @return [Any] Formatted routes
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/inspector.rb#41
  def call(*_arg0, **_arg1, &_arg2); end
end

# Error raised when variables given for route cannot be expanded into a full path.
#
# @api public
# @see Hanami::Router#path
# @see Hanami::Router#url
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/errors.rb#48
class Hanami::Router::InvalidRouteExpansionError < ::Hanami::Router::Error
  # @api private
  # @return [InvalidRouteExpansionError] a new instance of InvalidRouteExpansionError
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/errors.rb#51
  def initialize(name, message); end
end

# Error raised when no endpoint is specified for a route.
#
# Endpoints must be specified by `to:` or a block.
#
# @api public
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/errors.rb#18
class Hanami::Router::MissingEndpointError < ::Hanami::Router::Error
  # @api private
  # @return [MissingEndpointError] a new instance of MissingEndpointError
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/errors.rb#21
  def initialize(path); end
end

# Error raised when a named route could not be found.
#
# @api public
# @see Hanami::Router#path
# @see Hanami::Router#url
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/errors.rb#33
class Hanami::Router::MissingRouteError < ::Hanami::Router::Error
  # @api private
  # @return [MissingRouteError] a new instance of MissingRouteError
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/errors.rb#36
  def initialize(name); end
end

# source://hanami-router//lib/hanami/router/mounted_path.rb#5
class Hanami::Router::MountedPath
  # @return [MountedPath] a new instance of MountedPath
  #
  # source://hanami-router//lib/hanami/router/mounted_path.rb#6
  def initialize(prefix, app); end

  # source://hanami-router//lib/hanami/router/mounted_path.rb#11
  def endpoint_and_params(env); end
end

# Default response when the route method was not allowed
#
# @api private
# @since 2.1.0
#
# source://hanami-router//lib/hanami/router.rb#760
Hanami::Router::NOT_ALLOWED = T.let(T.unsafe(nil), Proc)

# Default response when no route was matched
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#775
Hanami::Router::NOT_FOUND = T.let(T.unsafe(nil), Proc)

# Trie node
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/node.rb#11
class Hanami::Router::Node
  # @api private
  # @return [Node] a new instance of Node
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#18
  def initialize; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#39
  def get(segment); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#66
  def leaf!(to); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#60
  def leaf?; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#26
  def put(segment, constraints); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#14
  def to; end

  private

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#86
  def fixed?(matcher); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#80
  def segment_for(segment, constraints); end

  # @api private
  # @return [Boolean]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/node.rb#74
  def variable?(segment); end
end

# Error raised when a recognized route is called but has no callable endpoint.
#
# @api public
# @see Hanami::Router#recognize
# @see Hanami::Router::RecognizedRoute#call
# @since 0.5.0
#
# source://hanami-router//lib/hanami/router/errors.rb#77
class Hanami::Router::NotRoutableEndpointError < ::Hanami::Router::Error
  # @api private
  # @return [NotRoutableEndpointError] a new instance of NotRoutableEndpointError
  # @since 0.5.0
  #
  # source://hanami-router//lib/hanami/router/errors.rb#80
  def initialize(env); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#746
Hanami::Router::PARAMS = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#694
Hanami::Router::PREFIXED_NAME_SEPARATOR = T.let(T.unsafe(nil), String)

# Params utilities
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/params.rb#9
class Hanami::Router::Params
  class << self
    # Deep symbolize Hash params
    #
    # @api private
    # @param params [Hash] the params to symbolize
    # @return [Hash] the symbolized params
    # @since 2.0.0
    #
    # source://hanami-router//lib/hanami/router/params.rb#18
    def deep_symbolize(params); end
  end
end

# URL Path prefix
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/prefix.rb#9
class Hanami::Router::Prefix
  # @api private
  # @return [Prefix] a new instance of Prefix
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#12
  def initialize(prefix); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#18
  def join(path); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#26
  def relative_join(path, separator = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#33
  def to_s; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#39
  def to_sym; end

  private

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/prefix.rb#59
  def _join(path); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/prefix.rb#47
Hanami::Router::Prefix::DEFAULT_SEPARATOR = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/prefix.rb#51
Hanami::Router::Prefix::DEFAULT_SEPARATOR_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/prefix.rb#55
Hanami::Router::Prefix::DOUBLE_DEFAULT_SEPARATOR_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#698
Hanami::Router::ROOT_PATH = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/constants.rb#7
Hanami::Router::ROUTER_PARSED_BODY = T.let(T.unsafe(nil), String)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#754
Hanami::Router::ROUTE_GLOBBED_MATCHER = T.let(T.unsafe(nil), Regexp)

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router.rb#750
Hanami::Router::ROUTE_VARIABLE_MATCHER = T.let(T.unsafe(nil), Regexp)

# HTTP Redirect
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/redirect.rb#9
class Hanami::Router::Redirect
  # @api private
  # @return [Redirect] a new instance of Redirect
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/redirect.rb#20
  def initialize(destination, code, endpoint); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/redirect.rb#28
  def call(env); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/redirect.rb#16
  def code; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/redirect.rb#12
  def destination; end
end

# A route from the router
#
# @api public
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/route.rb#12
class Hanami::Router::Route
  # @api private
  # @return [Route] a new instance of Route
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#66
  def initialize(http_method:, path:, to:, as: T.unsafe(nil), constraints: T.unsafe(nil), blk: T.unsafe(nil)); end

  # Returns the route's unique name, as given to `as:` when the route was defined.
  #
  # @api public
  # @return [Object]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#54
  def as; end

  # Returns true if the route has a name.
  #
  # @api public
  # @return [Boolean]
  # @see #as
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#96
  def as?; end

  # Returns the route's contraints hash for its path variables.
  #
  # @api public
  # @return [Hash]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#62
  def constraints; end

  # Returns true if the route has any constraints.
  #
  # @api public
  # @return [Boolean]
  # @see #constraints
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#108
  def constraints?; end

  # Returns true if the route is for the HEAD HTTP method.
  #
  # @api public
  # @return [Boolean]
  # @see #http_method
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#84
  def head?; end

  # Returns the route's HTTP method.
  #
  # @api public
  # @example
  #   route.http_method # => "GET"
  # @return [String]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#27
  def http_method; end

  # Returns a string containing a human-readable representation of the route's name.
  #
  # @api public
  # @return [String]
  # @see #as
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#155
  def inspect_as; end

  # Returns a string containing a human-readable representation of the route's {#constraints}.
  #
  # @api public
  # @return [String]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#141
  def inspect_constraints; end

  # Returns a string containing a human-readable representation of the route's {#to} endpoint.
  #
  # @api public
  # @return [String]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#118
  def inspect_to(value = T.unsafe(nil)); end

  # Returns the route's path.
  #
  # @api public
  # @example
  #   route.path # => "/a/b/c"
  # @return [String]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#38
  def path; end

  # Returns the route's Rack endpoint, as given to `to:` when the route was defined.
  #
  # @api public
  # @return [Object]
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/route.rb#46
  def to; end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/route.rb#15
Hanami::Router::Route::ROUTE_CONSTRAINT_SEPARATOR = T.let(T.unsafe(nil), String)

# Route path
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/segment.rb#11
class Hanami::Router::Segment
  class << self
    # @api private
    # @since 2.0.0
    #
    # source://hanami-router//lib/hanami/router/segment.rb#14
    def fabricate(segment, **constraints); end
  end
end

# Trie data structure to store routes
#
# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/trie.rb#11
class Hanami::Router::Trie
  # @api private
  # @return [Trie] a new instance of Trie
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/trie.rb#18
  def initialize; end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/trie.rb#24
  def add(path, to, constraints); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/trie.rb#35
  def find(path); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/trie.rb#14
  def root; end

  private

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/trie.rb#62
  def for_each_segment(path, &blk); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/trie.rb#57
Hanami::Router::Trie::SEGMENT_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# Error raised when an unknown HTTP status code is given.
#
# @api public
# @see Hanami::Router#redirect
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/errors.rb#62
class Hanami::Router::UnknownHTTPStatusCodeError < ::Hanami::Router::Error
  # @api private
  # @return [UnknownHTTPStatusCodeError] a new instance of UnknownHTTPStatusCodeError
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/errors.rb#65
  def initialize(code); end
end

# @api private
# @since 2.0.0
#
# source://hanami-router//lib/hanami/router/url_helpers.rb#11
class Hanami::Router::UrlHelpers
  # @api private
  # @return [UrlHelpers] a new instance of UrlHelpers
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/url_helpers.rb#14
  def initialize(base_url); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/url_helpers.rb#24
  def add(name, segment); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/url_helpers.rb#30
  def path(name, variables = T.unsafe(nil)); end

  # @api private
  # @since 2.0.0
  #
  # source://hanami-router//lib/hanami/router/url_helpers.rb#40
  def url(name, variables = T.unsafe(nil)); end
end

# Returns the hanami-router version.
#
# @api public
# @return [String]
# @since 0.1.0
#
# source://hanami-router//lib/hanami/router/version.rb#11
Hanami::Router::VERSION = T.let(T.unsafe(nil), String)
