# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hanami-api` gem.
# Please instead update this file by running `bin/tapioca gem hanami-api`.


# source://hanami-api//lib/hanami/api.rb#3
module Hanami; end

# Hanami::API
#
# @since 0.1.0
#
# source://hanami-api//lib/hanami/api.rb#7
class Hanami::API
  # TODO: verify if needed here on in block context
  #
  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api.rb#344
  def path(name, variables = T.unsafe(nil)); end

  # TODO: verify if needed here on in block context
  #
  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api.rb#352
  def url(name, variables = T.unsafe(nil)); end

  class << self
    # Defines a route that accepts DELETE requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#195
    def delete(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts GET requests for the given path.
    # It also defines a route to accept HEAD requests.
    #
    # @example Proc endpoint
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   get "/", to: ->(*) { [200, {}, ["OK"]] }
    #   end
    # @example Block endpoint
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   get "/" do
    #   "OK"
    #   end
    #   end
    # @example Constraints
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   get "/users/:id", to: ->(*) { [200, {}, ["OK"]] }, id: /\d+/
    #   end
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#135
    def get(*_arg0, **_arg1, &_arg2); end

    # Defines helper methods available within the block context.
    # Helper methods have access to default utilities available in block
    # context (e.g. `#halt`).
    #
    # @example Inline helpers definition
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   helpers do
    #   def redirect_to_root
    #   # redirect method is provided by Hanami::API block context
    #   redirect "/"
    #   end
    #   end
    #
    #   root { "Hello, World" }
    #
    #   get "/legacy" do
    #   redirect_to_root
    #   end
    #   end
    # @example Module helpers definition
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   module Authentication
    #   private
    #
    #   def unauthorized
    #   halt(401)
    #   end
    #   end
    #
    #   helpers(Authentication)
    #
    #   root { "Hello, World" }
    #
    #   get "/secrets" do
    #   unauthorized
    #   end
    #   end
    # @param mod [Module] optional module to include in block context
    # @param blk [Proc] inline helper definitions
    # @since x.x.x
    #
    # source://hanami-api//lib/hanami/api.rb#70
    def helpers(mod = T.unsafe(nil), &blk); end

    # @api private
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#16
    def inherited(app); end

    # Defines a route that accepts LINK requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#240
    def link(*_arg0, **_arg1, &_arg2); end

    # Mount a Rack application at the specified path.
    # All the requests starting with the specified path, will be forwarded to
    # the given application.
    #
    # All the other methods (eg `#get`) support callable objects, but they
    # restrict the range of the acceptable HTTP verb. Mounting an application
    # with #mount doesn't apply this kind of restriction at the router level,
    # but let the application to decide.
    #
    # @example
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   mount MyRackApp.new, at: "/foo"
    #   end
    # @param app [#call] a class or an object that responds to #call
    # @param at [String] the relative path where to mount the app
    # @param constraints [Hash] a set of constraints for path variables
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#318
    def mount(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts OPTIONS requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#225
    def options(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts PATCH requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#165
    def patch(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts POST requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#150
    def post(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts PUT requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#180
    def put(*_arg0, **_arg1, &_arg2); end

    # Defines a route that redirects the incoming request to another path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param code [Integer] a HTTP status code to use for the redirect
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#269
    def redirect(*_arg0, **_arg1, &_arg2); end

    # Defines a named root route (a GET route for "/")
    #
    # @example Proc endpoint
    #   require "hanami/router"
    #
    #   router = Hanami::Router.new do
    #   root to: ->(env) { [200, {}, ["Hello from Hanami!"]] }
    #   end
    # @example Block endpoint
    #   require "hanami/router"
    #
    #   router = Hanami::Router.new do
    #   root do
    #   "Hello from Hanami!"
    #   end
    #   end
    # @param to [#call] the Rack endpoint
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#98
    def root(*_arg0, **_arg1, &_arg2); end

    # Defines a routing scope. Routes defined in the context of a scope,
    # inherit the given path as path prefix and as a named routes prefix.
    #
    # @example
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   scope "v1" do
    #   get "/users", to: ->(*) { ... }, as: :users
    #   end
    #   end
    #
    #   # It generates a route with a path `/v1/users`
    # @param path [String] the scope path to be used as a path prefix
    # @param blk [Proc] the routes definitions withing the scope
    # @see #path
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#293
    def scope(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts TRACE requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#210
    def trace(*_arg0, **_arg1, &_arg2); end

    # Defines a route that accepts UNLINK requests for the given path.
    #
    # @param path [String] the relative URL to be matched
    # @param to [#call] the Rack endpoint
    # @param as [Symbol] a unique name for the route
    # @param constraints [Hash] a set of constraints for path variables
    # @param blk [Proc] the anonymous proc to be used as endpoint for the route
    # @see .get
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#255
    def unlink(*_arg0, **_arg1, &_arg2); end

    # Use a Rack middleware
    #
    # @example
    #   require "hanami/api"
    #
    #   class MyAPI < Hanami::API
    #   use MyRackMiddleware
    #   end
    # @param middleware [Class, #call] a Rack middleware
    # @param args [Array<Object>] an optional array of arguments for Rack middleware
    # @param blk [Block] an optional block to pass to the Rack middleware
    # @since 0.1.0
    #
    # source://hanami-api//lib/hanami/api.rb#336
    def use(middleware, *args, &blk); end
  end
end

# source://hanami-api//lib/hanami/api/block/context.rb#9
module Hanami::API::Block; end

# Execution context for Block syntax
#
# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/block/context.rb#13
class Hanami::API::Block::Context < ::Hanami::Router::Block::Context
  # Utility for redirect back using HTTP request header `HTTP_REFERER`
  #
  # @example
  #   get "/authenticate" do
  #   if authenticate(env)
  #   redirect back
  #   else
  #   # ...
  #   end
  #   end
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#103
  def back; end

  # @overload body
  # @overload body
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#22
  def body(value = T.unsafe(nil)); end

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#138
  def call; end

  # Halts the flow of the block and immediately returns with the current
  # HTTP status
  #
  # @example HTTP Status
  #   get "/authenticate" do
  #   halt(401)
  #
  #   # this code will never be reached
  #   end
  #
  #   # It sets a Rack response: [401, {}, ["Unauthorized"]]
  # @example HTTP Status and body
  #   get "/authenticate" do
  #   halt(401, "You shall not pass")
  #
  #   # this code will never be reached
  #   end
  #
  #   # It sets a Rack response: [401, {}, ["You shall not pass"]]
  # @param status [Integer] a valid HTTP status code
  # @param body [String] an optional HTTP response body
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#55
  def halt(status, body = T.unsafe(nil)); end

  # Sets a JSON response for the given object
  #
  # @example JSON serializable object
  #   get "/user/:id" do
  #   user = UserRepository.new.find(params[:id])
  #   json(user)
  #   end
  # @example JSON serializable object and custom MIME type
  #   get "/user/:id" do
  #   user = UserRepository.new.find(params[:id])
  #   json(user, "application/vnd.api+json")
  #   end
  # @param object [Object] a JSON serializable object
  # @param mime [String] optional MIME type to set for the response
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#125
  def json(object, mime = T.unsafe(nil)); end

  # Redirects request and immediately halts it
  #
  # @example URL
  #   get "/legacy" do
  #   redirect "/dashboard"
  #
  #   # this code will never be reached
  #   end
  #
  #   # It sets a Rack response: [301, {"Location" => "/new"}, ["Moved Permanently"]]
  # @example URL and HTTP status
  #   get "/legacy" do
  #   redirect "/dashboard", 302
  #
  #   # this code will never be reached
  #   end
  #
  #   # It sets a Rack response: [302, {"Location" => "/new"}, ["Moved"]]
  # @param url [String] the destination URL
  # @param status [Integer] an optional HTTP code for the redirect
  # @see #halt
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#86
  def redirect(url, status = T.unsafe(nil)); end

  private

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#170
  def caught; end

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#178
  def http_status(code); end

  # @api private
  # @since x.x.x
  #
  # source://hanami-api//lib/hanami/api/block/context.rb#184
  def json_enum(collection); end
end

# Expose Hanami::API features to third party frameworks that need to expose
# a routing DSL.
#
# @example
#   # framework.rb
#   require "hanami/api"
#
#   module Framework
#   class App
#   def self.inherited(base)
#   super
#   base.extend(Hanami::API::DSL)
#   end
#   end
#   end
#
#   # app.rb
#   require "framework/app"
#
#   class MyApp < Framework::App
#   routes do
#   root { "Hello, World!" }
#   end
#   end
#
#   # config.ru
#   require_relative "./app"
#
#   run MyApp.new
# @since 0.2.0
#
# source://hanami-api//lib/hanami/api/dsl.rb#36
module Hanami::API::DSL
  class << self
    # @api private
    # @since 0.2.0
    #
    # source://hanami-api//lib/hanami/api/dsl.rb#39
    def extended(app); end
  end
end

# @api private
# @since 0.2.0
#
# source://hanami-api//lib/hanami/api/dsl.rb#49
module Hanami::API::DSL::ClassMethods
  # @api private
  # @since 0.2.0
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#52
  def router; end

  class << self
    # @api private
    # @since 0.2.0
    #
    # source://hanami-api//lib/hanami/api/dsl.rb#56
    def extended(app); end
  end
end

# @api private
# @since 0.2.0
#
# source://hanami-api//lib/hanami/api/dsl.rb#69
module Hanami::API::DSL::ClassMethods::Routes
  # A block to define application routes
  #
  # This is ONLY available for third-party frameworks that use
  # Hanami::API DSL.
  #
  # If you use Hanami::API directly, this method isn't available.
  #
  # @api public
  # @param blk [Proc] the block to define the routes
  # @see Hanami::API::Router
  # @since 0.2.0
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#83
  def routes(&blk); end
end

# @since 0.2.0
#
# source://hanami-api//lib/hanami/api/dsl.rb#89
module Hanami::API::DSL::InstanceMethods
  # Initialize the app
  #
  # @api public
  # @param router [Hanami::API::Router] the application router
  # @since 0.2.0
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#96
  def initialize(router: T.unsafe(nil)); end

  # Compatibility with Rack protocol
  #
  # @api public
  # @param env [Hash] a Rack env for the current request
  # @since 0.2.0
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#120
  def call(env); end

  # @api private
  # @since 0.2.0
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#104
  def freeze; end

  # Printable routes
  #
  # @api public
  # @return [String] printable routes
  # @since x.x.x
  #
  # source://hanami-api//lib/hanami/api/dsl.rb#130
  def to_inspect; end
end

# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/error.rb#6
class Hanami::API::Error < ::StandardError; end

# Hanami::API middleware stack
#
# @api private
# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/middleware.rb#11
module Hanami::API::Middleware; end

# Middleware stack
#
# @api private
# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/middleware.rb#16
class Hanami::API::Middleware::Stack
  # @api private
  # @return [Stack] a new instance of Stack
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/middleware.rb#19
  def initialize(prefix); end

  # @api private
  # @since 0.1.1
  #
  # source://hanami-api//lib/hanami/api/middleware.rb#42
  def finalize(app); end

  # @api private
  # @since 0.1.1
  #
  # source://hanami-api//lib/hanami/api/middleware.rb#34
  def to_hash; end

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/middleware.rb#26
  def use(path, middleware, *args, &blk); end

  private

  # @api private
  # @since 0.1.1
  #
  # source://hanami-api//lib/hanami/api/middleware.rb#53
  def stack_for(current_path); end
end

# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/router.rb#10
class Hanami::API::Router < ::Hanami::Router
  # @api private
  # @return [Router] a new instance of Router
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/router.rb#17
  def initialize(block_context: T.unsafe(nil), inspector: T.unsafe(nil), **kwargs); end

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/router.rb#24
  def freeze; end

  # @api private
  # @since x.x.x
  #
  # source://hanami-api//lib/hanami/api/router.rb#13
  def inspector; end

  # Returns formatted routes
  #
  # @api private
  # @return [String] formatted routes
  # @since x.x.x
  #
  # source://hanami-api//lib/hanami/api/router.rb#49
  def to_inspect; end

  # @api private
  # @since 0.1.1
  #
  # source://hanami-api//lib/hanami/api/router.rb#39
  def to_rack_app; end

  # @api private
  # @since 0.1.0
  #
  # source://hanami-api//lib/hanami/api/router.rb#33
  def use(middleware, *args, &blk); end
end

# @since 0.1.0
#
# source://hanami-api//lib/hanami/api/version.rb#6
Hanami::API::VERSION = T.let(T.unsafe(nil), String)
